{"version":3,"sources":["BooksAPI.js","components/OpenSearch.js","components/Book.js","components/Shelf.js","components/MainPage.js","components/SearchBar.js","components/SearchResults.js","components/SearchPage.js","components/App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","then","res","json","data","books","search","query","maxResults","method","body","JSON","stringify","OpenSearch","className","to","Book","book","changeBookShelf","useContext","ChangeBookShelfContext","shelf","imageLinks","title","authors","selectRef","useRef","style","width","height","backgroundImage","thumbnail","smallThumbnail","ref","defaultValue","onChange","shelfValue","current","value","disabled","Shelf","filter","map","id","shelves","MainPage","SearchBar","fetchQueryBooks","useState","text","setText","useEffect","mounted","a","BooksAPI","Array","isArray","fetchResults","type","placeholder","e","target","SearchResults","fetchedBooks","SearchPage","setFetchedBooks","queriedBooks","forEach","found","find","React","createContext","App","setBooks","getBooks","storedBooks","sessionStorage","getItem","parse","setItem","Provider","newBooks","foundBook","splice","indexOf","push","path","element","exact","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.c9800cc5.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\nlet token = localStorage.token;\n\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query, maxResults }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","import { Link } from 'react-router-dom'\n\nexport default function OpenSearch() {\n    return (\n        \n        <div className=\"open-search\">\n            <Link to='/search'>Add a book</Link>\n        </div>\n    )\n}","import { useContext, useRef } from \"react\"\nimport { ChangeBookShelfContext } from \"./App\"\n\nexport default function Book({ book }) {\n\n    const changeBookShelf = useContext(ChangeBookShelfContext)\n\n    const { shelf, imageLinks, title, authors } = book\n    const selectRef = useRef(null)\n\n    function handleShelfChange() {\n        const shelfValue = selectRef.current.value\n        changeBookShelf(book, shelfValue)\n    }\n\n    return (\n        <div className=\"book\">\n            <div className=\"book-top\">\n            <div\n                className=\"book-cover\"\n                style={{\n                width: 128,\n                height: 193,\n                backgroundImage:\n                    `url('${imageLinks && (imageLinks.thumbnail || imageLinks.smallThumbnail)}')`\n                }}\n            ></div>\n            <div className=\"book-shelf-changer\">\n                <select ref={selectRef} defaultValue={shelf? shelf : \"none\"} onChange={handleShelfChange}>\n                    <option disabled>\n                        Move to...\n                    </option>\n                    <option value=\"currentlyReading\">\n                        Currently Reading\n                    </option>\n                    <option value=\"wantToRead\">Want to Read</option>\n                    <option value=\"read\">Read</option>\n                    <option value=\"none\">None</option>\n                </select>\n            </div>\n            </div>\n            <div className=\"book-title\">{title}</div>\n            <div className=\"book-authors\">{authors && authors[0]}</div>\n        </div>\n    )\n}","import Book from \"./Book\"\n\nexport default function Shelf({ title, shelfValue, books }) {\n\n    return (\n        \n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">{title}</h2>\n            <div className=\"bookshelf-books\">\n            <ol className=\"books-grid\">\n                {\n                    books.filter( (book) => (\n                        book.shelf === shelfValue\n                    )).map( book => (\n                        <li key={book.id}>\n                            <Book book={book} />\n                        </li>\n                    ))\n                }\n            </ol>\n            </div>\n        </div>\n    )\n}","import OpenSearch from \"./OpenSearch\"\nimport Shelf from \"./Shelf\"\n\nconst shelves = [\n    {title: \"Currently Reading\", shelfValue: \"currentlyReading\"},\n    {title: \"Want to Read\", shelfValue: \"wantToRead\"},\n    {title: \"Read\", shelfValue: \"read\"},\n]\n\nexport default function MainPage({ books }) {\n\n    return (\n        \n        <div className=\"list-books\">\n            <div className=\"list-books-title\">\n                <h1>MyReads</h1>\n            </div>\n            <div className=\"list-books-content\">\n                <div>\n                    {\n                        shelves.map( ({title, shelfValue}) => (\n                            <Shelf title={title} shelfValue={shelfValue} books={books} key={shelfValue} />\n                        ))\n                    }\n                </div>\n            </div>\n            <OpenSearch />\n        </div>\n    )\n}","import { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport * as BooksAPI from '../BooksAPI'\n\nexport default function SearchBar({ fetchQueryBooks }) {\n    const [text, setText] = useState('')\n\n    function handleChange(e) {\n        setText(e.target.value);\n    }\n\n    useEffect( () => {\n        let mounted = true;\n\n        async function fetchResults() {\n            const data = await BooksAPI.search(text, 20)\n            if(mounted) {\n                if(Array.isArray(data)) {\n                    fetchQueryBooks(data)\n                } else {\n                    fetchQueryBooks([])\n                }\n            }\n        }\n\n        if(text) fetchResults()\n        else fetchQueryBooks([])\n\n        return () => {\n            mounted = false\n        }\n    }, [text])\n\n    return (\n        <div className=\"search-books-bar\">\n            <Link\n            to=\"/\"\n            className=\"close-search\"\n            >\n            Close\n            </Link>\n            <div className=\"search-books-input-wrapper\">\n            <input\n                type=\"text\"\n                placeholder=\"Search by title, author, or ISBN\"\n                value={text}\n                onChange={handleChange}\n            />\n            </div>\n        </div>\n    )\n}","import Book from \"./Book\"\n\nexport default function SearchResults({ fetchedBooks }) {\n\n    return (\n        <div className=\"search-books-results\">\n            <ol className=\"books-grid\">\n                {\n                    fetchedBooks.map( book => (\n                        <li key={book.id}>\n                            <Book book={book} />\n                        </li>\n                    ))\n                }\n            </ol>\n        </div>\n    )\n}","import { useState } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport SearchResults from \"./SearchResults\";\n\nexport default function SearchPage({ books }) {\n    const [fetchedBooks, setFetchedBooks] = useState([])\n\n    function fetchQueryBooks(queriedBooks) {\n        queriedBooks.forEach( book => {\n            let found = books.find( search => search.id === book.id)\n            if(found) {\n                book.shelf = found.shelf\n            }\n        })\n        setFetchedBooks(queriedBooks);\n    }\n\n    return (\n        <div className=\"search-books\">\n            <SearchBar fetchQueryBooks={fetchQueryBooks} />\n            <SearchResults fetchedBooks={fetchedBooks} />\n        </div>\n    )\n}","import \"../App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport * as BooksAPI from '../BooksAPI'\nimport MainPage from \"./MainPage\";\nimport SearchPage from \"./SearchPage\";\nimport { Routes, Route } from 'react-router-dom'\n\nexport const ChangeBookShelfContext = React.createContext({})\n\nfunction App() {\n  const [books, setBooks] = useState([])\n\n  useEffect( () => {\n\n    async function getBooks() {\n      let data = await BooksAPI.getAll()\n      setBooks(data);\n    }\n\n    // if there is stored data, use instead\n    let storedBooks = sessionStorage.getItem('books')\n    if(storedBooks) {\n      try{\n        setBooks(JSON.parse(storedBooks))\n      } catch {\n        getBooks()\n      }\n    } else {\n      getBooks()\n    }\n  }, [])\n\n  // store the data in session storage\n  // so that it persists through page refreshes\n  useEffect( () => {\n    sessionStorage.setItem('books', JSON.stringify(books))\n  }, [books])\n\n  function changeBookShelf(book, shelf) {\n    let newBooks = [...books]\n    let foundBook = newBooks.find( search => search.id === book.id )\n    if (foundBook) {\n      foundBook.shelf = shelf\n      if(shelf === 'none') {\n        newBooks.splice(newBooks.indexOf(foundBook), 1)\n      }\n    } else {\n      book.shelf = shelf\n      newBooks.push(book);\n    }\n    setBooks(newBooks)\n  }\n\n  return (\n    <ChangeBookShelfContext.Provider value={changeBookShelf}>\n      <div className=\"app\">\n        <Routes>\n          <Route path=\"/search\"\n            element={<SearchPage books={books} />}\n          />\n          <Route path=\"/\" exact \n            element={<MainPage books={books} />}\n          />\n          <Route path=\"*\"\n            element={<h2>Not Found</h2>}\n          />\n        </Routes>\n      </div>\n    </ChangeBookShelfContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/MyReads-Book-Library\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}